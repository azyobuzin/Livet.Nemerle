using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Livet.Commands;

namespace Livet.Nemerle
{
  /// Makes a property of Livet.Commands.ViewModelCommand from the method.
  /// The name of made property is the name of the method + "Command"
  /// Usage: [ViewModelCommand] Foo() : void { }
  /// If you make CanFoo() : bool method, made property will use that method to judge whether to execute the command.
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  public macro ViewModelCommand(builder : TypeBuilder, method : MethodBuilder) {
    def instanceField = Macros.NewSymbol("instance_" + method.Name + "Command");
    <[ decl:
        private mutable $(instanceField.Id : usesite) : ViewModelCommand = null;
    ]>
    |> builder.Define;
    
    def canExecute = "Can" + method.Header.Name;
    when (!builder.GetMethods().Any(m => m.Header.Name == canExecute))
      <[ decl:
        private $(Name(canExecute).Id : usesite)() : bool
        { true; }
      ]>
      |> builder.Define;
        
    <[ decl:
        public $(Name(method.Name + "Command").Id : usesite) : ViewModelCommand
        {
          get
          {
            when ($(instanceField.Id : usesite) == null)
              $(instanceField.Id : usesite) = ViewModelCommand(
                $(Name(method.Header.Name).Id : usesite),
                $(Name(canExecute).Id : usesite)
              );
            $(instanceField.Id : usesite);
          }
        }
    ]>
    |> builder.Define;
  }
}
